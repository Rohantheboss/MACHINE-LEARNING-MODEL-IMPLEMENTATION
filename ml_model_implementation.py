# -*- coding: utf-8 -*-
"""ml_model_implementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P4_mXXSQ-yN4GlUVYJrFKA37383TU_jd
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Step 1: Load dataset
url = "https://raw.githubusercontent.com/justmarkham/pycon-2016-tutorial/master/data/sms.tsv"
df = pd.read_csv(url, sep='\t', header=None, names=['label', 'message'])

# Step 2: Preprocess
df['label_num'] = df.label.map({'ham': 0, 'spam': 1})  # 0 = not spam, 1 = spam

# Step 3: Split data
X_train, X_test, y_train, y_test = train_test_split(df['message'], df['label_num'], test_size=0.3, random_state=42)

# Step 4: Convert text to features
vectorizer = TfidfVectorizer(stop_words='english')
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Step 5: Train model
model = MultinomialNB()
model.fit(X_train_vec, y_train)

# Step 6: Evaluate model
y_pred = model.predict(X_test_vec)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Step 7: Predict on new messages
def predict_spam(msg):
    vec = vectorizer.transform([msg])
    result = model.predict(vec)[0]
    return "SPAM" if result == 1 else "HAM (Not Spam)"

# Try it
while True:
    user_input = input("\nType a message to check (or 'exit'): ")
    if user_input.lower() == 'exit':
        break
    print("Prediction:", predict_spam(user_input))